{"name":"LibgateY","tagline":"Visualize and control C++ data using the web browser. Single hpp/cpp, no dependencies, OS X, Windows, Linux.","body":"![Native and js screenshots](images/spaceship.png)\r\n\r\nWhat is it for?\r\n---------------\r\n\r\nUse a web browser to easily visualize data from your C++ program and control it’s behaviour. libgateY allows you to add variables shared between the native C++ code and the javascript code. Here's an example:\r\n\r\n##### C++\r\n```c++\r\ngatey::global = std::make_shared<gatey::GateY>();\r\n\r\nstd::tuple<float, float> position(300.0f, 300.0f);\r\ngatey::WriteVariable<std::tuple<float, float>> gPosition(\"position\");\r\ngatey::ReadVariable<float> gDt(\"dt\", 0.01f);\r\n\r\nstd::mt19937 gen;\r\nstd::normal_distribution<float> normal(0, 1);\r\n\r\nwhile (true) {\r\n    std::get<0>(position) += gDt.get() * normal(gen);\r\n    std::get<1>(position) += gDt.get() * normal(gen);\r\n    gPosition.set(position);\r\n    std::this_thread::sleep_for(std::chrono::milliseconds(20));\r\n}\r\n```\r\n\r\n##### Javascirpt\r\n```javascript\r\n$(document).ready(function() {\r\n    gatey.global = new gatey.GateY('ws://127.0.0.1:9000');\r\n\r\n    var gDt = new gatey.WriteVariable('dt');\r\n    var gPosition = new gatey.ReadVariable('position', [0, 0]);\r\n\r\n    $('#slider_dt').slider({\r\n        min: 0, max: 100, value: 1,\r\n        slide: function() { gDt.set($(\"#slider_dt\").slider(\"value\") / 10); }\r\n    });\r\n\r\n    var ctx = document.getElementById('particle_trace').getContext('2d');\r\n    gPosition.onChange = function(position) {\r\n        ctx.fillRect(position[0] - 2, position[1] - 2, 4, 4);\r\n    };\r\n});\r\n```\r\n\r\nWho is it for?\r\n--------------\r\n\r\n+ You have a console application and want to visualize some data it’s producing at runtime. \r\n+ You have a game and don’t want to write an ingame gui to control it’s behaviour. \r\n+ You found a bug and need to graph the value of a variable to get a better understanding of the faulty behaviour.\r\n\r\nWhat does it do?\r\n----------------\r\n\r\nLibGateY helps you send data structures over WebSockets from your C++ program to the web browser and the other way. It can send and receive a large amount of C++ standard types by default. For example `std::map<std::string, std::tuple<float, float, float>>` will automatically be converted to a JSON object of the form `{ key0: [x, y, z], key1: [x, y, z] }` The serialization machinery can be extended to support your own types.\r\n\r\nHow do I use it?\r\n----------------\r\n\r\nLibGateY tries to be as simple to deploy as possible, so it consists of only one .hpp and one .cpp file. It doesn’t have any dependecies. Just copy it into your project.\r\n\r\nSpaceship example\r\n-----------------\r\n\r\n##### C++\r\n```c++\r\ngatey::global = std::make_shared<gatey::GateY>();\r\n\r\nSDL_Init(SDL_INIT_EVERYTHING);\r\nSDL_Window *win = SDL_CreateWindow(\"Spaceship\", 50, 50, 250, 250, SDL_WINDOW_SHOWN);\r\nSDL_Renderer *renderer = SDL_CreateRenderer(win, -1, SDL_RENDERER_ACCELERATED);\r\n\r\nVec2 position(125, 125), velocity(0, 0);\r\ngatey::WriteVariable<Vec2> gPosition(\"position\"), gVelocity(\"velocity\");\r\ngatey::ReadVariable<float> gPower(\"power\", 20.0f);\r\n\r\n\r\nfloat dt = 1.0f / 30;\r\n\r\nstd::vector<SDL_Rect> trail;\r\n\r\nwhile (true){\r\n    double tStart = time();\r\n    \r\n    SDL_Event e;\r\n    while (SDL_PollEvent(&e)) {\r\n        if (e.type == SDL_QUIT)\r\n            return 0;\r\n    }\r\n    \r\n    Vec2 acceleration(0, 0);\r\n    Uint8 const* keyboard = SDL_GetKeyboardState(nullptr);\r\n    if(keyboard[SDL_SCANCODE_LEFT]) acceleration += Vec2(-1, 0);\r\n    if(keyboard[SDL_SCANCODE_RIGHT]) acceleration += Vec2(1, 0);\r\n    if(keyboard[SDL_SCANCODE_UP]) acceleration += Vec2(0, -1);\r\n    if(keyboard[SDL_SCANCODE_DOWN]) acceleration += Vec2(0, 1);\r\n    \r\n    velocity += dt * gPower.get() * acceleration;\r\n    position += dt * velocity;\r\n    \r\n    gVelocity.set(velocity);\r\n    gPosition.set(position);\r\n    \r\n    SDL_SetRenderDrawColor(renderer, 0, 0, 0, 255); //black\r\n    SDL_RenderClear(renderer);\r\n    \r\n    SDL_Rect rect = { (int)position.x - 5, (int)position.y - 5, 10, 10 };\r\n    SDL_SetRenderDrawColor(renderer, 255, 255, 255, 255); //white\r\n    SDL_RenderFillRect(renderer, &rect);\r\n    \r\n    SDL_RenderPresent(renderer);\r\n    \r\n    double tEnd = time();\r\n    int tDeltaInMs = (int)(1000.0 * (tEnd - tStart));\r\n    SDL_Delay(std::max(30 - tDeltaInMs, 0));\r\n}\r\n```\r\n\r\n##### Javascript\r\n```javascript\r\nvar gPosition = new gatey.ReadVariable('position', 0);\r\nvar gVelocity = new gatey.ReadVariable('velocity', 0);\r\nvar gPower = new gatey.WriteVariable('power');\r\n\r\n//Create a slider to control spaceship acceleration\r\nfunction slideUpdate() {\r\n    gPower.set($(\"#slider_a\").slider(\"value\"));\r\n}\r\n\r\n$(function() {\r\n    $('#slider_a').slider({\r\n        min: 0, max: 100, value: 20,\r\n        slide: slideUpdate, change: slideUpdate\r\n    });\r\n});\r\n\r\n//Draw the spaceship trajectory\r\nvar canvas = document.getElementById('spaceship_trace');\r\nvar ctx = canvas.getContext('2d');\r\n\r\nvar lastPos = undefined;\r\ngPosition.onChange = function(newPos) {\r\n    if(lastPos) {\r\n        ctx.beginPath();\r\n        ctx.moveTo(lastPos[0], lastPos[1]);\r\n        ctx.lineTo(newPos[0], newPos[1]);\r\n        ctx.stroke();\r\n\r\n        $('#position').html(JSON.stringify(newPos));\r\n    }\r\n\r\n    lastPos = newPos;\r\n};\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}