{"name":"Libgatey","tagline":"Visualize and control C++ data using the web browser. Single hpp/cpp, no dependencies, OS X, Windows, Linux.","body":"Visualize and control C++ data using the web browser. Single hpp/cpp, no dependencies, OS X, Windows, Linux.\r\n\r\n![Native and js screenshots](images/spaceship.png)\r\n\r\nWhat is it for?\r\n---------------\r\n\r\nUse a web browser to easily visualize data from your C++ program and control it’s behaviour. \r\n\r\nWho is it for?\r\n--------------\r\n\r\nYou have a console application and want to visualize some data it’s producing while it is running. You have a game and don’t want to write ingame interface to control some aspect of it’s behaviour. You found a bug and need to graph the value of some variable to get a better understanding of the faulty behaviour.\r\n\r\nWhat does it do?\r\n----------------\r\n\r\nLibGateY helps you send data structures over WebSockets from your C++ program to the web browser and the other way. It can send and receive a large amount of C++ standard types by default. For example std::map<std::string, std::tuple<float, float, float>> will automatically be converted to a JSON object of the form { key0: [x, y, z], key1: [x, y, z] }. The serialization machinery can be extended to support your own types.\r\n\r\nHow do I use it?\r\n----------------\r\n\r\nLibGateY tries to be as simple to deploy as possible, so it consists of only one .hpp and one .cpp file. It doesn’t have any dependecies. Just copy it into your project.\r\n\r\nSpaceship example\r\n-----------------\r\n\r\n\r\n```c++\r\ngatey::global = std::make_shared<gatey::GateY>();\r\n\r\n// Init window and graphics (using SDL)\r\n\r\nVec2 position(300, 300), velocity(0, 0);\r\ngatey::WriteVariable<Vec2> gPosition(\"position\"), gVelocity(\"velocity\");\r\ngatey::ReadVariable<float> gPower(\"power\", 20.0f);\r\nfloat dt = 1.0f / 30;\r\n\r\nwhile (true) {\r\n    Vec2 acceleration(0, 0);\r\n    // Handle input (arrow keys accelerate)\r\n    \r\n    velocity += dt * gPower.get() * acceleration;\r\n    position += dt * velocity;\r\n    gVelocity.set(velocity);\r\n    gPosition.set(position);\r\n    \r\n    // Draw rectangle at position\r\n}\r\n```\r\n\r\n```javascript\r\nvar gPosition = new gatey.ReadVariable('position', 0);\r\nvar gVelocity = new gatey.ReadVariable('velocity', 0);\r\nvar gPower = new gatey.WriteVariable('power');\r\n\r\nfunction slideUpdate() {\r\n    gPower.set($(\"#slider_a\").slider(\"value\"));\r\n}\r\n\r\n// JQuery slider\r\n\r\nvar canvas = document.getElementById('spaceship_trace');\r\nvar ctx = canvas.getContext('2d');\r\n\r\nvar lastPos = undefined;\r\ngPosition.onChange = function(newPos) {\r\n    if(lastPos) {\r\n        //Draw line on cavnas\r\n        $('#position').html(JSON.stringify(newPos));\r\n    }\r\n\r\n    lastPos = newPos;\r\n};\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}